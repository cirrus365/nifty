version: '3.8'

services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: ${RESTART_POLICY:-unless-stopped}
    security_opt:
      - no-new-privileges:true
    command:
      # API and Dashboard
      - "--api.dashboard=${ENABLE_TRAEFIK_DASHBOARD:-false}"
      - "--api.debug=false"
      # Docker provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=${DOCKER_NETWORK}"
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      # Let's Encrypt configuration
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # Conditionally use staging server
      - "--certificatesresolvers.letsencrypt.acme.caserver=${USE_LETSENCRYPT_STAGING:+https://acme-staging-v02.api.letsencrypt.org/directory}"
      # Logging
      - "--log.level=${LOG_LEVEL:-INFO}"
      - "--accesslog=${ENABLE_ACCESS_LOG:-true}"
      - "--accesslog.filepath=/logs/access.log"
      - "--accesslog.bufferingsize=100"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
      - traefik-logs:/logs
    networks:
      - bot-network
    labels:
      # Dashboard configuration (if enabled)
      - "traefik.enable=${ENABLE_TRAEFIK_DASHBOARD:-false}"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_SUBDOMAIN}.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-auth,security-headers@docker"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"
      # Security headers middleware
      - "traefik.http.middlewares.security-headers.headers.customFrameOptionsValue=SAMEORIGIN"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.security-headers.headers.forceSTSHeader=true"
      # Rate limiting middleware
      - "traefik.http.middlewares.rate-limit.ratelimit.average=${RATE_LIMIT_PER_MINUTE:-60}"
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=100"

  nifty-bot:
    build:
      context: ..
      dockerfile: Docker/Dockerfile
    container_name: nifty-bot
    restart: ${RESTART_POLICY:-unless-stopped}
    env_file:
      - ../.env
    environment:
      # Override webhook URL to use Traefik
      - TWILIO_WEBHOOK_BASE_URL=https://${BOT_SUBDOMAIN}.${DOMAIN}
    volumes:
      # Mount config files if needed
      - ../config:/app/config:ro
      # Persist any data/cache if needed
      - bot-data:/app/data
      # Backup directory
      - bot-backups:${BACKUP_DIR:-/backups}
    networks:
      - bot-network
    labels:
      # Enable Traefik only if Twilio webhooks are enabled
      - "traefik.enable=${ENABLE_WHATSAPP:-false}"
      - "traefik.http.routers.nifty-bot.rule=Host(`${BOT_SUBDOMAIN}.${DOMAIN}`)"
      - "traefik.http.routers.nifty-bot.entrypoints=websecure"
      - "traefik.http.routers.nifty-bot.tls.certresolver=letsencrypt"
      - "traefik.http.services.nifty-bot.loadbalancer.server.port=${TWILIO_WEBHOOK_PORT:-5000}"
      - "traefik.http.routers.nifty-bot.middlewares=security-headers@docker,rate-limit@docker"
      # IP whitelist if configured
      - "traefik.http.middlewares.ip-whitelist.ipwhitelist.sourcerange=${IP_WHITELIST:-0.0.0.0/0}"
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILES:-3}"

volumes:
  bot-data:
  bot-backups:
  traefik-letsencrypt:
  traefik-logs:

networks:
  bot-network:
    driver: bridge
    name: ${DOCKER_NETWORK:-bot-network}
